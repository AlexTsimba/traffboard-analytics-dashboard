# Traffboard Analytics Dashboard - Product Requirements Document (Revised)

## Project Overview

Transform the Next.js SaaS Boilerplate (https://github.com/ixartz/SaaS-Boilerplate) into Traffboard, a comprehensive analytics dashboard for affiliate marketing and player conversion tracking. This project requires 90% automation using Infrastructure MCPs (Digital Ocean, PostgreSQL, GitHub Actions) with intelligent cleanup and modernization.

## Technical Architecture (REVISED)

### Simplified Monorepo Structure (Turborepo)
```
apps/
â””â”€â”€ web/              # Next.js 15 App Router (Full Stack)
    â”œâ”€â”€ app/          # App Router pages & API routes
    â”œâ”€â”€ components/   # React Server & Client Components
    â””â”€â”€ lib/          # Database, auth, utilities
packages/
â”œâ”€â”€ database/         # Drizzle schema + migrations  
â”œâ”€â”€ auth/            # 2FA authentication system
â”œâ”€â”€ partners/        # Partner data normalization engine
â”œâ”€â”€ ui/              # shadcn components library
â””â”€â”€ types/           # Shared TypeScript definitions
```

### **ARCHITECTURE CHANGE: App Router Full Stack (No Separate Node.js Backend)**
- **Frontend + Backend**: Next.js 15 App Router with Server Components
- **API Layer**: App Router API routes for auth and external integrations
- **Database**: Direct Drizzle queries from Server Components
- **ORM**: Drizzle for type-safe database operations
- **Package Manager**: pnpm only (no npm)
- **Containerization**: Single Docker container (Next.js only)

**Benefits of App Router Architecture:**
- **Simplified deployment**: Single service instead of frontend + backend
- **Better performance**: Server Components query database directly
- **Type safety**: End-to-end TypeScript from database to UI
- **SSR/ISR**: Perfect for analytics dashboards with cached reports
- **Reduced complexity**: No GraphQL layer needed

### Security Requirements

#### **NEW: Anti-Web Scraping Protection (Low Priority)**
- **Repository Privacy**: Private GitHub repository
- **Authentication Wall**: Zero public pages (everything behind login)
- **Bot Detection**: User-agent filtering, rate limiting, automation detection
- **Session Security**: Fingerprinting, activity pattern validation
- **Infrastructure Protection**: IP whitelisting, VPC isolation
- **Monitoring**: Intrusion detection and alerting

#### Standard Security
- **Database**: Encrypted connections with `sslmode=require`
- **Authentication**: 2FA with QR codes, JWT with refresh tokens
- **API Security**: Input validation, rate limiting, CORS configuration
- **Infrastructure**: VPC isolation, firewall rules, SSL certificates
- **Secrets Management**: Environment-specific encrypted variables

## Data Pipeline & Partner Normalization

### Critical Business Requirement: Partner Data Normalization

**Problem**: Different partners send data in inconsistent formats:
- Partner A: `creative_id` â†’ `source` field
- Partner B: `creative_id` â†’ `sub2` field  
- Partner C: Missing required fields
- Partner D: Different date formats

**Solution**: Partner Settings Engine (Server Components + API Routes)

```typescript
interface PartnerSettings {
  partnerId: string;
  fieldMappings: {
    source: 'creative_id' | 'campaign_name' | 'sub2' | null;
    sub2: 'creative_id' | 'landing_id' | 'custom_field' | null;
    // ... other field mappings
  };
  requiredFields: string[];
  dataValidation: ValidationRules;
  dateFormat: 'YYYY-MM-DD' | 'MM/DD/YYYY' | 'DD.MM.YYYY';
}
```

### **REVISED: App Router Data Processing Pipeline**
1. **Raw Data Ingestion**: Google Sheets â†’ API Route â†’ Staging table
2. **Partner Lookup**: Server Action identifies partner from data source
3. **Field Mapping**: Server Component applies partner-specific transformations
4. **Validation**: Ensure required fields and data types
5. **Normalization**: Convert to unified database schema via Drizzle
6. **Display**: Server Component renders analytics with ISR caching

### Database Schema (Unchanged)
```sql
-- Partner configuration
partners_settings (
  partner_id VARCHAR PRIMARY KEY,
  field_mappings JSONB,
  validation_rules JSONB,
  created_at TIMESTAMP
);

-- Staging for raw data
data_staging (
  id SERIAL PRIMARY KEY,
  raw_data JSONB,
  partner_id VARCHAR,
  processed BOOLEAN DEFAULT FALSE,
  errors TEXT[]
);

-- Normalized analytics tables
conversions (
  id SERIAL PRIMARY KEY,
  date DATE,
  partner_id VARCHAR,
  campaign_id VARCHAR,
  source VARCHAR,        -- Normalized field
  sub2 VARCHAR,          -- Normalized field
  clicks INTEGER,
  registrations INTEGER
);
```

## Authentication System Requirements

### 2FA Implementation (App Router)
- **QR Code Generation**: TOTP standard (compatible with Google Authenticator, Authy)
- **Database Storage**: User credentials, 2FA secrets, session tokens
- **User Journey**: Registration â†’ Email verification â†’ QR setup â†’ Dashboard access
- **Session Management**: NextAuth.js with database sessions
- **Security**: Middleware-based rate limiting, account lockout, secure passwords

### User Management (Unchanged)
```sql
users (
  id SERIAL PRIMARY KEY,
  email VARCHAR UNIQUE,
  password_hash VARCHAR,
  totp_secret VARCHAR,
  totp_enabled BOOLEAN DEFAULT FALSE,
  role VARCHAR DEFAULT 'user',
  created_at TIMESTAMP
);

sessions (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  token_hash VARCHAR,
  expires_at TIMESTAMP,
  created_at TIMESTAMP
);
```

## UI/UX Requirements

### shadcn Components (No Customization)
- **Layout**: sidebar-7 template from shadcn
- **Header**: Sticky header with navigation
- **Theme**: Dark/light theme switcher in settings
- **Charts**: shadcn charts library for all visualizations
- **Forms**: Standard shadcn form components with validation

### **NEW: Server Component Architecture**
- **Server Components**: Data fetching and rendering
- **Client Components**: Interactive charts and filters
- **Streaming**: Progressive loading for large datasets
- **ISR**: Cached analytics reports for performance

### Design Principles
- Focus on functionality over aesthetics
- Responsive design for desktop/tablet
- Accessibility compliance (WCAG 2.1)
- Fast loading and smooth interactions

## Infrastructure Requirements

### **REVISED: Single Container Docker Configuration**
- **Application Container**: Next.js App Router (full stack)
- **Database**: Digital Ocean Managed PostgreSQL (external)
- **Development**: Hot reload and debugging capabilities
- **Production**: Optimized build with health checks

### Digital Ocean Setup (Simplified)
- **Compute**: Single droplet deployment (scalable vertically)
- **Database**: Managed PostgreSQL cluster with backups
- **Storage**: Spaces for static assets and backups
- **Networking**: VPC with security groups and firewall rules

### CI/CD Pipeline (Unchanged)
- **GitHub Actions**: Automated testing, building, and deployment
- **Container Registry**: Digital Ocean Container Registry
- **Deployment Strategy**: Blue-green deployments with rollback capability
- **Environment Management**: Staging and production environments

## Fast-First Deployment Strategy

### Phase 1: MVP (30 minutes) â†’ Live URL
- Clone SaaS boilerplate and cleanup Node.js backend
- Convert to App Router with Server Components
- Basic dashboard with mock data
- Deploy single container to Digital Ocean

### Phase 2: Secure Foundation (1 hour)
- PostgreSQL setup with encrypted connections
- NextAuth.js 2FA authentication system
- Anti-scraping middleware implementation
- Basic partner settings interface

### Phase 3: Data Pipeline (2 hours)
- Partner normalization engine (Server Actions)
- CSV import with validation (API Routes)
- Real analytics data integration (Server Components)
- ISR caching for performance

### Phase 4: Production Features
- Advanced analytics dashboards
- Export functionality
- Performance optimization
- Monitoring and alerting

## COMPLEXITY REQUIREMENT
All tasks must be â‰¤3/10 complexity. Auto-decompose tasks >3 into â‰¤10 subtasks.
Target: <2 hours per task with complete testing and validation.

## **REVISED: Task Updates Required**

### Tasks to Update/Remove:
1. **Remove**: "Develop Node.js Backend Structure" 
2. **Update**: "Develop Next.js Frontend Structure" â†’ "Convert to App Router Full Stack"
3. **Update**: "Implement API Routes" â†’ "Implement Server Components & API Routes"
4. **Add**: "Implement Anti-Scraping Security" (Low Priority)
5. **Update**: "Configure Docker Environment" â†’ "Single Container Docker Setup"

### **NEW: Anti-Scraping Security Task (Low Priority)**
```typescript
interface AntiScrapingTask {
  id: 13,
  title: "Implement Anti-Web Scraping Protection",
  description: "Implement comprehensive anti-scraping measures including bot detection, rate limiting, and session security",
  priority: "low",
  dependencies: [4, 7], // Auth + API routes
  complexity: 3,
  subtasks: [
    "Repository privacy configuration",
    "Authentication wall middleware",
    "Bot detection and user-agent filtering", 
    "Rate limiting implementation",
    "Session fingerprinting security",
    "Intrusion detection monitoring"
  ]
}
```

## Additional Development Speed Suggestions

### ğŸš€ Rapid Development Strategies

**1. Server Component-First Approach:**
- Direct database queries from Server Components
- ISR for cached analytics dashboards
- Streaming for progressive data loading
- Client Components only for interactivity

**2. Template-Driven Development:**
- Start with working App Router analytics template
- Pre-populate with actual conversion data structure
- Use Server Component patterns for data fetching
- Implement responsive design from the start

**3. Infrastructure-as-Code Acceleration:**
- Single container Docker compose for instant environment
- GitHub Actions templates for immediate CI/CD
- Digital Ocean terraform for reproducible infrastructure
- Database migrations with rollback capabilities

**4. Performance-First Implementation:**
- Server Components for zero client-side data fetching
- ISR caching for dashboard performance
- Optimistic UI updates for better user experience
- Edge caching strategies for static analytics

**5. Testing Automation:**
- Generate tests from actual CSV data patterns
- Visual regression tests for charts
- Performance tests for data-heavy operations
- E2E tests covering complete user workflows

### âš¡ Implementation Accelerators

**Auto-Generated Development Environment:**
```bash
# Single command setup
npm run setup:dev
# - Removes Node.js backend from boilerplate
# - Converts to App Router structure
# - Sets up simplified Turborepo structure
# - Configures single container Docker
# - Seeds database with test data
# - Starts development server
```

**Smart Code Generation:**
```bash
# Generate complete features from data structure
npm run generate:analytics-feature --csv conversions.csv
# - Creates database schema
# - Generates TypeScript types
# - Creates Server Components
# - Builds dashboard components
# - Writes comprehensive tests
```

**Deployment Automation:**
```bash
# One-command deployment
npm run deploy:production
# - Builds optimized single container
# - Provisions Digital Ocean infrastructure
# - Deploys with zero downtime
# - Sets up monitoring and alerts
```

## Performance Requirements

### Frontend Performance (App Router)
- **Load Time**: < 2 seconds initial page load
- **Interactivity**: < 500ms filter response time (Client Components)
- **Server Components**: Instant rendering with database data
- **ISR**: Cached analytics with 1-hour revalidation
- **Lighthouse Score**: 90+ across all metrics

### Backend Performance (Server Components)
- **Database Queries**: < 200ms for standard aggregations
- **Server Component Rendering**: < 100ms for cached reports
- **Concurrent Users**: Support 100+ simultaneous users
- **Data Processing**: Handle 1M+ records efficiently

### Infrastructure Scalability (Simplified)
- **Single Container**: Vertical scaling initially
- **Database**: Connection pooling and read optimization
- **ISR Caching**: Next.js built-in caching strategies
- **CDN**: Static asset delivery optimization

## Security Requirements

### Authentication & Authorization (App Router)
- **Auth System**: NextAuth.js with database sessions
- **Role Management**: Admin/User permission levels
- **Session Security**: Middleware-based security and CSRF protection

### **NEW: Anti-Scraping Protection (Comprehensive)**
- **Repository Security**: Private GitHub repository
- **Zero Public Access**: Everything behind authentication wall
- **Bot Detection**: Advanced user-agent and behavior analysis
- **Rate Limiting**: Per-IP and per-user request limiting
- **Session Security**: Fingerprinting and activity validation
- **Infrastructure**: VPC isolation and IP whitelisting
- **Monitoring**: Real-time intrusion detection and alerting

### Data Protection (Unchanged)
- **Database Security**: Encrypted connections and access controls
- **API Security**: Rate limiting and input validation
- **Infrastructure**: VPC isolation and firewall rules
- **Compliance**: Basic data privacy and retention policies

## Migration Strategy

### **REVISED: Boilerplate Cleanup (App Router Focus)**
- **Remove**: Node.js backend, GraphQL layer, Clerk auth, Stripe payments, Sentry monitoring, i18n
- **Convert**: Pages Router â†’ App Router with Server Components
- **Keep**: Next.js structure, Tailwind config, testing setup
- **Transform**: Update to analytics-focused Server Components

### Data Migration (Unchanged)
- **Schema Design**: Based on provided CSV structures
- **Import Tools**: Automated CSV to PostgreSQL ingestion via API Routes
- **Validation**: Data integrity checks and error reporting

### Deployment Pipeline (Simplified)
- **Single Container**: Simplified Docker deployment
- **Staging Environment**: Complete testing environment
- **Production Deployment**: Automated with rollback capability
- **Monitoring**: Health checks and performance metrics

## Success Metrics

### Technical Metrics
- **Automation Level**: 90%+ of tasks automated via MCPs
- **Build Time**: < 3 minutes for full pipeline (single container)
- **Test Coverage**: 80%+ unit and integration tests
- **Deployment Success**: 99%+ successful deployments

### Performance Metrics (App Router)
- **Server Component Rendering**: < 100ms
- **ISR Cache Hit Rate**: > 90%
- **Database Query Performance**: < 100ms for standard operations
- **Uptime**: 99.9% availability target

### Development Metrics
- **Code Quality**: ESLint compliance with zero errors
- **TypeScript Coverage**: 100% type safety
- **Documentation**: Complete API and component documentation
- **Maintainability**: Modular App Router architecture

## Timeline & Milestones

### Week 1: Foundation & Infrastructure
- Project setup and boilerplate cleanup (App Router conversion)
- PostgreSQL schema and single container Docker
- Digital Ocean infrastructure provisioning
- CI/CD pipeline establishment

### Week 2: App Router & Data Pipeline
- Server Components development
- Database integration and migrations
- Google Sheets data pipeline (API Routes)
- Testing and validation systems

### Week 3: Dashboard Development
- Analytics Server Components and visualizations
- Client Component filters and interactivity
- ISR caching implementation
- Performance optimization

### Week 4: Deployment & Security
- Production deployment
- Anti-scraping security implementation
- Performance tuning and monitoring
- Documentation and handover

## Risk Assessment

### Technical Risks (Updated)
- **Migration Complexity**: Pages Router â†’ App Router conversion
- **Performance**: Large dataset Server Component rendering
- **Caching**: ISR cache invalidation strategies
- **Security**: Anti-scraping effectiveness

### Infrastructure Risks (Simplified)
- **Scalability**: Single container vertical scaling limits
- **Availability**: Database performance under load
- **Security**: Comprehensive anti-scraping protection
- **Cost**: Digital Ocean resource optimization

### Mitigation Strategies
- **Monitoring**: Comprehensive logging and alerting
- **Backup**: Automated database backups and disaster recovery
- **Testing**: Extensive automated testing coverage including security tests
- **Documentation**: Clear operational procedures and troubleshooting guides