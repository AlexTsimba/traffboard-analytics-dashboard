name: 🚀 Continuous Deployment

# Modern CD pipeline with optimized caching, security, and deployment strategies
# Features: pnpm caching, Next.js optimization, blue-green deployment, auto-rollback

on:
  push:
    branches: [main, master]
  workflow_run:
    workflows: ["CI (Private Repository)"]
    types: [completed]
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'
  PNPM_VERSION: '9.0.0'

jobs:
  # Pre-deployment checks
  pre-deployment:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      commit-sha: ${{ steps.commit.outputs.sha }}
    steps:
      - name: Check deployment conditions
        id: check
        run: |
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "✅ Deployment conditions met"
      
      - name: Get commit SHA
        id: commit
        run: |
          echo "sha=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT

  # Optimized Docker build with advanced caching
  docker-build:
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should-deploy == 'true'
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: ♻️ Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: ♻️ Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.next/cache
            ${{ github.workspace }}/apps/web/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build application
        run: pnpm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          NODE_OPTIONS: "--max-old-space-size=4096"
          DATABASE_URL: postgresql://user:pass@localhost:5432/placeholder
          NEXTAUTH_SECRET: build-time-secret-placeholder
          NEXTAUTH_URL: http://localhost:3000

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.pre-deployment.outputs.commit-sha }}

      - name: 🔨 Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/web/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1
            NODE_OPTIONS=--max-old-space-size=4096
          secrets: |
            "database_url=${{ secrets.DATABASE_URL }}"

      - name: 📋 Set image output
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment.outputs.commit-sha }}" >> $GITHUB_OUTPUT

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.docker-build.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📋 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Production deployment with blue-green strategy
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Digital Ocean
        id: deploy
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            set -e
            
            # Colors for output
            RED='\033[0;31m'
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            NC='\033[0m' # No Color
            
            echo -e "${YELLOW}🚀 Starting deployment...${NC}"
            
            # Environment variables
            export DOCKER_IMAGE="${{ needs.docker-build.outputs.image }}"
            export NEW_CONTAINER="traffboard-new"
            export CURRENT_CONTAINER="traffboard-current"
            export BACKUP_CONTAINER="traffboard-backup"
            
            # Function to check container health
            check_health() {
              local container_name=$1
              local max_attempts=30
              local attempt=1
              
              echo -e "${YELLOW}🏥 Checking health of $container_name...${NC}"
              
              while [ $attempt -le $max_attempts ]; do
                if docker exec $container_name curl -f http://localhost:3000/api/health >/dev/null 2>&1; then
                  echo -e "${GREEN}✅ Container $container_name is healthy${NC}"
                  return 0
                fi
                echo -e "${YELLOW}⏳ Attempt $attempt/$max_attempts failed, waiting...${NC}"
                sleep 10
                attempt=$((attempt + 1))
              done
              
              echo -e "${RED}❌ Container $container_name failed health checks${NC}"
              return 1
            }
            
            # Function to rollback
            rollback() {
              echo -e "${RED}🔄 Rolling back deployment...${NC}"
              
              # Stop new container
              docker stop $NEW_CONTAINER 2>/dev/null || true
              docker rm $NEW_CONTAINER 2>/dev/null || true
              
              # Restore backup if it exists
              if docker ps -a --format 'table {{.Names}}' | grep -q $BACKUP_CONTAINER; then
                echo -e "${YELLOW}📦 Restoring backup container...${NC}"
                docker start $BACKUP_CONTAINER 2>/dev/null || true
              fi
              
              echo -e "${RED}❌ Deployment failed and rolled back${NC}"
              exit 1
            }
            
            # Pull new image
            echo -e "${YELLOW}📥 Pulling new image...${NC}"
            docker pull $DOCKER_IMAGE || {
              echo -e "${RED}❌ Failed to pull image${NC}"
              exit 1
            }
            
            # Stop and backup current container
            if docker ps --format 'table {{.Names}}' | grep -q $CURRENT_CONTAINER; then
              echo -e "${YELLOW}🛑 Stopping current container...${NC}"
              docker stop $CURRENT_CONTAINER
              docker rename $CURRENT_CONTAINER $BACKUP_CONTAINER
            fi
            
            # Start new container
            echo -e "${YELLOW}🆕 Starting new container...${NC}"
            docker run -d \
              --name $NEW_CONTAINER \
              --restart unless-stopped \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
              -e NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}" \
              $DOCKER_IMAGE || rollback
            
            # Health check
            if ! check_health $NEW_CONTAINER; then
              rollback
            fi
            
            # Switch traffic (rename containers)
            echo -e "${YELLOW}🔄 Switching traffic to new container...${NC}"
            docker rename $NEW_CONTAINER $CURRENT_CONTAINER
            
            # Final health check
            sleep 5
            if ! check_health $CURRENT_CONTAINER; then
              rollback
            fi
            
            # Cleanup old backup
            if docker ps -a --format 'table {{.Names}}' | grep -q $BACKUP_CONTAINER; then
              echo -e "${YELLOW}🧹 Cleaning up old backup...${NC}"
              docker stop $BACKUP_CONTAINER 2>/dev/null || true
              docker rm $BACKUP_CONTAINER 2>/dev/null || true
            fi
            
            # Cleanup old images (keep last 3)
            echo -e "${YELLOW}🧹 Cleaning up old images...${NC}"
            docker images --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | \
              grep "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" | \
              tail -n +4 | \
              awk '{print $1}' | \
              xargs -r docker rmi || true
            
            echo -e "${GREEN}✅ Deployment completed successfully!${NC}"
            echo "url=https://${{ secrets.DO_HOST }}" >> $GITHUB_OUTPUT

      - name: 🔍 Post-deployment verification
        run: |
          echo "🔍 Running post-deployment checks..."
          
          # Wait for DNS propagation
          sleep 30
          
          # Check if the application is responding
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f -s -o /dev/null "https://${{ secrets.DO_HOST }}/api/health"; then
              echo "✅ Application is responding correctly"
              break
            fi
            echo "⏳ Attempt $attempt/$max_attempts failed, waiting..."
            sleep 15
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Post-deployment verification failed"
            exit 1
          fi

      - name: 📊 Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: '${{ github.event.deployment.id }}',
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              environment_url: 'https://${{ secrets.DO_HOST }}',
              description: '${{ job.status }}' === 'success' ? 
                'Deployment completed successfully' : 
                'Deployment failed'
            });

  # Notification and cleanup
  post-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: 📢 Notify deployment status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "🎉 Deployment to production completed successfully!"
            echo "🌐 Live at: https://${{ secrets.DO_HOST }}"
            echo "📦 Image: ${{ needs.docker-build.outputs.image }}"
            echo "🔖 Commit: ${{ needs.pre-deployment.outputs.commit-sha }}"
          else
            echo "❌ Deployment failed"
            exit 1
          fi

      - name: 🧹 Cleanup workflow artifacts
        if: success()
        run: |
          echo "🧹 Cleaning up temporary files and caches..."
          # Additional cleanup tasks can be added here
